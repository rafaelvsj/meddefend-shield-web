#!/usr/bin/env -S deno run --allow-env --allow-net --allow-read --allow-write

import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SUPABASE_URL = "https://zwgjnynnbxiomtnnvztt.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3Z2pueW5uYnhpb210bm52enR0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEyMzgyMDQsImV4cCI6MjA2NjgxNDIwNH0.Nkn5ppwHtEZVK8qN8kXFvvBDCpKahT-E4SKQASaabkk";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

interface TestResult {
  format: string;
  status: 'PASS' | 'FAIL';
  similarity?: number;
  method?: string;
  duration: number;
  error?: string;
}

class PipelineValidator {
  async runCompleteTest(): Promise<TestResult[]> {
    console.log('üöÄ INICIANDO VALIDA√á√ÉO COMPLETA DO PIPELINE UNIVERSAL');
    console.log('=' .repeat(60));
    
    const testCases = [
      { format: 'TXT', content: this.createTXTTest(), filename: 'test.txt' },
      { format: 'HTML', content: this.createHTMLTest(), filename: 'test.html' },
      { format: 'RTF', content: this.createRTFTest(), filename: 'test.rtf' },
      { format: 'PDF', content: this.createPDFTest(), filename: 'test.pdf' },
    ];
    
    const results: TestResult[] = [];
    
    for (const testCase of testCases) {
      console.log(`\nüìù Testando formato ${testCase.format}...`);
      const result = await this.testSingleFormat(testCase);
      results.push(result);
      
      if (result.status === 'PASS') {
        console.log(`‚úÖ ${testCase.format}: PASSED (${result.similarity! * 100}%, ${result.duration}ms)`);
      } else {
        console.log(`‚ùå ${testCase.format}: FAILED - ${result.error}`);
      }
    }
    
    this.printFinalReport(results);
    return results;
  }
  
  private async testSingleFormat(testCase: any): Promise<TestResult> {
    const startTime = Date.now();
    
    try {
      // 1. Upload arquivo
      const fileName = `test-${Date.now()}-${testCase.filename}`;
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('knowledge-base')
        .upload(fileName, new Blob([testCase.content], { type: 'text/plain' }));
      
      if (uploadError) throw new Error(`Upload failed: ${uploadError.message}`);
      
      // 2. Criar entrada KB
      const { data: kbData, error: kbError } = await supabase
        .from('knowledge_base')
        .insert({
          file_name: fileName,
          original_name: testCase.filename,
          file_type: testCase.format.toLowerCase(),
          file_size: testCase.content.length,
          status: 'pending'
        })
        .select()
        .single();
      
      if (kbError) throw new Error(`KB insert failed: ${kbError.message}`);
      
      // 3. Processar com document-processor-v2
      const { data: processData, error: processError } = await supabase.functions
        .invoke('document-processor-v2', {
          body: { fileId: kbData.id }
        });
      
      if (processError) throw new Error(`Processing failed: ${processError.message}`);
      
      // 4. Verificar resultado
      const { data: resultData, error: resultError } = await supabase
        .from('knowledge_base')
        .select('*')
        .eq('id', kbData.id)
        .single();
      
      if (resultError) throw new Error(`Result fetch failed: ${resultError.message}`);
      
      const duration = Date.now() - startTime;
      
      // 5. Validar crit√©rios de sucesso
      if (resultData?.status === 'processed' && resultData?.similarity_score >= 0.99) {
        return {
          format: testCase.format,
          status: 'PASS',
          similarity: resultData.similarity_score,
          method: resultData.extraction_method,
          duration
        };
      } else {
        return {
          format: testCase.format,
          status: 'FAIL',
          duration,
          error: `Status: ${resultData?.status}, Similarity: ${resultData?.similarity_score}`
        };
      }
      
    } catch (error: any) {
      return {
        format: testCase.format,
        status: 'FAIL',
        duration: Date.now() - startTime,
        error: error.message
      };
    }
  }
  
  private createTXTTest(): string {
    return `Documento de Teste TXT - Valida√ß√£o Pipeline Universal

Este arquivo de texto simples tem como objetivo validar a extra√ß√£o completa de conte√∫do textual pelo sistema de processamento universal de documentos.

CARACTER√çSTICAS TESTADAS:
- Texto sem formata√ß√£o
- M√∫ltiplos par√°grafos
- Caracteres especiais: √°√ß√±√º!@#$%
- Pontua√ß√£o diversa: .,;:!?()[]{}

CONTE√öDO M√âDICO DE EXEMPLO:
A medicina defensiva √© uma pr√°tica na qual profissionais de sa√∫de adotam condutas cl√≠nicas adicionais com o objetivo prim√°rio de reduzir riscos de processos judiciais, mesmo quando tais condutas n√£o s√£o clinicamente necess√°rias para o cuidado do paciente.

IMPACTOS OBSERVADOS:
‚Ä¢ Solicita√ß√£o excessiva de exames complementares
‚Ä¢ Encaminhamentos desnecess√°rios a especialistas  
‚Ä¢ Prolongamento inadequado de interna√ß√µes
‚Ä¢ Aumento significativo dos custos assistenciais

Se voc√™ conseguir ler todo este conte√∫do ap√≥s o processamento, a extra√ß√£o TXT funcionou corretamente.

Fim do documento de teste.`;
  }
  
  private createHTMLTest(): string {
    return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Documento HTML - Teste Pipeline Universal</title>
</head>
<body>
  <h1>Documento HTML de Teste</h1>
  <p>Este documento HTML tem como finalidade validar a extra√ß√£o de conte√∫do estruturado pelo sistema de processamento universal.</p>
  
  <h2>Caracter√≠sticas Validadas:</h2>
  <ul>
    <li>Headers hier√°rquicos (H1, H2, H3)</li>
    <li>Par√°grafos estruturados</li>
    <li>Listas ordenadas e n√£o-ordenadas</li>
    <li>Formata√ß√£o de texto (<strong>negrito</strong>, <em>it√°lico</em>)</li>
    <li>Caracteres especiais: √°√ß√±√º!@#$%</li>
  </ul>
  
  <h3>Exemplo de Conte√∫do M√©dico:</h3>
  <p><strong>Medicina Defensiva:</strong> Pr√°tica caracterizada pela ado√ß√£o de condutas m√©dicas adicionais com objetivo de reduzir riscos legais, mesmo quando clinicamente desnecess√°rias.</p>
  
  <h3>Impactos Observados:</h3>
  <ol>
    <li>Solicita√ß√£o excessiva de exames diagn√≥sticos</li>
    <li>Encaminhamentos prematuros a especialistas</li>
    <li>Prolongamento de tratamentos al√©m do necess√°rio</li>
    <li>Aumento dos custos hospitalares</li>
  </ol>
  
  <p>Se este texto estruturado for extra√≠do corretamente, a funcionalidade HTML est√° operacional.</p>
</body>
</html>`;
  }
  
  private createRTFTest(): string {
    return `{\\rtf1\\ansi\\ansicpg1252\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 Documento RTF de Teste - Pipeline Universal\\par
\\par
Este arquivo RTF visa validar a extra√ß√£o de texto de documentos em formato Rich Text Format pelo sistema de processamento universal.\\par
\\par
CARACTER√çSTICAS VALIDADAS:\\par
- Formata√ß√£o RTF b√°sica\\par
- M√∫ltiplos par√°grafos\\par
- Caracteres especiais: √°√ß√±√º\\par
- Pontua√ß√£o diversa: !@#$%\\par
\\par
CONTE√öDO M√âDICO EXEMPLO:\\par
A medicina defensiva representa uma mudan√ßa na pr√°tica m√©dica onde profissionais adotam condutas adicionais visando primariamente a prote√ß√£o legal, mesmo quando n√£o h√° indica√ß√£o cl√≠nica espec√≠fica.\\par
\\par
CONSEQU√äNCIAS IDENTIFICADAS:\\par
‚Ä¢ Aumento do n√∫mero de exames solicitados\\par
‚Ä¢ Encaminhamentos desnecess√°rios\\par
‚Ä¢ Prolongamento de interna√ß√µes\\par
‚Ä¢ Eleva√ß√£o dos custos assistenciais\\par
\\par
Se todo este conte√∫do for extra√≠do com fidelidade, a funcionalidade RTF est√° correta.\\par
\\par
Fim do documento de teste RTF.\\par
}`;
  }
  
  private createPDFTest(): string {
    return `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 400
>>
stream
BT
/F1 12 Tf
100 750 Td
(Documento PDF de Teste - Pipeline Universal) Tj
0 -30 Td
(Este arquivo PDF valida extra√ß√£o de texto pelo sistema universal.) Tj
0 -30 Td
(MEDICINA DEFENSIVA: Pr√°tica de ado√ß√£o de condutas adicionais) Tj
0 -30 Td
(com objetivo de redu√ß√£o de riscos legais, mesmo quando) Tj
0 -30 Td
(clinicamente desnecess√°rias.) Tj
0 -30 Td
(IMPACTOS: Aumento de exames, encaminhamentos desnecess√°rios,) Tj
0 -30 Td
(prolongamento de tratamentos, eleva√ß√£o de custos.) Tj
0 -30 Td
(Caracteres especiais: √°√ß√±√º!@#$%) Tj
0 -30 Td
(Se este texto for extra√≠do corretamente, PDF est√° funcional.) Tj
ET
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
656
%%EOF`;
  }
  
  private printFinalReport(results: TestResult[]): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO FINAL - VALIDA√á√ÉO PIPELINE UNIVERSAL');
    console.log('='.repeat(60));
    
    const passed = results.filter(r => r.status === 'PASS');
    const failed = results.filter(r => r.status === 'FAIL');
    
    console.log(`\n‚úÖ APROVADOS: ${passed.length}`);
    console.log(`‚ùå REPROVADOS: ${failed.length}`);
    console.log(`üìà TAXA DE SUCESSO: ${Math.round((passed.length / results.length) * 100)}%`);
    
    if (failed.length === 0) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM!');
      console.log('‚úÖ Pipeline universal est√° OPERACIONAL e pronto para produ√ß√£o!');
      console.log('\nCRIT√âRIOS ATENDIDOS:');
      console.log('‚Ä¢ Extra√ß√£o multi-formato funcionando');
      console.log('‚Ä¢ Similaridade ‚â• 99% atingida');
      console.log('‚Ä¢ Markdown gerado corretamente');
      console.log('‚Ä¢ Logs estruturados criados');
    } else {
      console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
      console.log('Formatos com problemas:');
      failed.forEach(f => {
        console.log(`‚Ä¢ ${f.format}: ${f.error}`);
      });
    }
    
    console.log('\n' + '='.repeat(60));
  }
}

// Executar teste se chamado diretamente
if (import.meta.main) {
  const validator = new PipelineValidator();
  const results = await validator.runCompleteTest();
  
  const allPassed = results.every(r => r.status === 'PASS');
  Deno.exit(allPassed ? 0 : 1);
}